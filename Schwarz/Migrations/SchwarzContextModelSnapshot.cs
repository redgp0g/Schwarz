// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Schwarz.Data;

#nullable disable

namespace Schwarz.Migrations
{
    [DbContext(typeof(SchwarzContext))]
    partial class SchwarzContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Schwarz.Areas.Identity.Data.SchwarzUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IDSchwarzUser")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IDSchwarzUser")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Schwarz.Models.Boleto", b =>
                {
                    b.Property<int>("IDBoleto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Caracteristica")
                        .HasColumnType("longtext");

                    b.Property<float>("Cota")
                        .HasColumnType("float");

                    b.Property<float>("Numeracao")
                        .HasColumnType("float")
                        .HasColumnName("Boleto");

                    b.Property<string>("Tolerancia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IDBoleto");

                    b.ToTable("Boleto");
                });

            modelBuilder.Entity("Schwarz.Models.CadastroOleo", b =>
                {
                    b.Property<int>("IDCadastroOleo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiarioBordo")
                        .HasColumnType("longtext");

                    b.Property<int>("IDMaquina")
                        .HasColumnType("int");

                    b.Property<string>("IDUser")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Litros")
                        .HasColumnType("double");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IDCadastroOleo");

                    b.HasIndex("IDMaquina");

                    b.HasIndex("IDUser");

                    b.ToTable("CadastroOleo");
                });

            modelBuilder.Entity("Schwarz.Models.Cliente", b =>
                {
                    b.Property<int>("IDCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IDCliente");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Schwarz.Models.Desenho", b =>
                {
                    b.Property<int>("IDDesenho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescricaoRevisao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("IDSchwarzUserAprovador")
                        .HasColumnType("int");

                    b.Property<int?>("IDSchwarzUserDesenhador")
                        .HasColumnType("int");

                    b.Property<int?>("IDProcesso")
                        .HasColumnType("int");

                    b.Property<int?>("IDProduto")
                        .HasColumnType("int");

                    b.Property<string>("Observacoes")
                        .HasColumnType("longtext");

                    b.Property<int>("Revisao")
                        .HasColumnType("int");

                    b.HasKey("IDDesenho");

                    b.HasIndex("IDSchwarzUserAprovador");

                    b.HasIndex("IDSchwarzUserDesenhador");

                    b.HasIndex("IDProcesso");

                    b.HasIndex("IDProduto");

                    b.ToTable("Desenho");
                });

            modelBuilder.Entity("Schwarz.Models.DesenhoBoleto", b =>
                {
                    b.Property<int>("IDDesenhoBoleto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IDBoleto")
                        .HasColumnType("int");

                    b.Property<int>("IDDesenho")
                        .HasColumnType("int");

                    b.HasKey("IDDesenhoBoleto");

                    b.HasIndex("IDBoleto");

                    b.HasIndex("IDDesenho");

                    b.ToTable("DesenhoBoleto");
                });

            modelBuilder.Entity("Schwarz.Models.EquipeFSP", b =>
                {
                    b.Property<int>("IDEquipeFSP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IDFSP")
                        .HasColumnType("int");

                    b.Property<int>("IDSchwarzUser")
                        .HasColumnType("int");

                    b.HasKey("IDEquipeFSP");

                    b.HasIndex("IDFSP");

                    b.HasIndex("IDSchwarzUser");

                    b.ToTable("EquipeFSP");
                });

            modelBuilder.Entity("Schwarz.Models.EquipeIdeia", b =>
                {
                    b.Property<int>("IDEquipeIdeia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IDSchwarzUser")
                        .HasColumnType("int");

                    b.Property<int>("IDIdeia")
                        .HasColumnType("int");

                    b.HasKey("IDEquipeIdeia");

                    b.HasIndex("IDSchwarzUser");

                    b.HasIndex("IDIdeia");

                    b.ToTable("EquipeIdeia");
                });

            modelBuilder.Entity("Schwarz.Models.Falha", b =>
                {
                    b.Property<int>("IDFalha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Identificacao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IDFalha");

                    b.ToTable("Falha");
                });

            modelBuilder.Entity("Schwarz.Models.Fluxo", b =>
                {
                    b.Property<int>("IDFluxo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Aplicacao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CodigoFL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescricaoRevisao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IDSchwarzUserAprovador")
                        .HasColumnType("int");

                    b.Property<int>("IDSchwarzUserCriador")
                        .HasColumnType("int");

                    b.Property<int>("IDProduto")
                        .HasColumnType("int");

                    b.Property<int>("Revisao")
                        .HasColumnType("int");

                    b.HasKey("IDFluxo");

                    b.HasIndex("IDSchwarzUserAprovador");

                    b.HasIndex("IDSchwarzUserCriador");

                    b.HasIndex("IDProduto");

                    b.ToTable("Fluxo");
                });

            modelBuilder.Entity("Schwarz.Models.FluxoOperacao", b =>
                {
                    b.Property<int>("IDFluxoOperacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IDFluxo")
                        .HasColumnType("int");

                    b.Property<int>("IDOperacao")
                        .HasColumnType("int");

                    b.HasKey("IDFluxoOperacao");

                    b.HasIndex("IDFluxo");

                    b.HasIndex("IDOperacao");

                    b.ToTable("FluxoOperacao");
                });

            modelBuilder.Entity("Schwarz.Models.FSP", b =>
                {
                    b.Property<int>("IDFSP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AplicarTreinamento")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AtualizarFMEA")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AtualizarInstrucao")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AtualizarPlanoControle")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CausaRaizFalha")
                        .HasColumnType("longtext");

                    b.Property<string>("CausaRaizPassou")
                        .HasColumnType("longtext");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataFechamento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataVerificacao")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("EficazVerificacao")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EmitirAlertaQualidade")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IDFalha")
                        .HasColumnType("int");

                    b.Property<int?>("IDSchwarzUserAlertaQualidade")
                        .HasColumnType("int");

                    b.Property<int?>("IDSchwarzUserFMEA")
                        .HasColumnType("int");

                    b.Property<int?>("IDSchwarzUserInstrucao")
                        .HasColumnType("int");

                    b.Property<int?>("IDSchwarzUserNovaFSP")
                        .HasColumnType("int");

                    b.Property<int?>("IDSchwarzUserPlanoControle")
                        .HasColumnType("int");

                    b.Property<int?>("IDSchwarzUserPokaYoke")
                        .HasColumnType("int");

                    b.Property<int?>("IDSchwarzUserTreinamento")
                        .HasColumnType("int");

                    b.Property<int?>("IDSchwarzUserVerificacao")
                        .HasColumnType("int");

                    b.Property<int?>("IDNovaFSP")
                        .HasColumnType("int");

                    b.Property<string>("IndicadorVerificacao")
                        .HasColumnType("longtext");

                    b.Property<string>("MaodeObra")
                        .HasColumnType("longtext");

                    b.Property<string>("Maquina")
                        .HasColumnType("longtext");

                    b.Property<string>("Material")
                        .HasColumnType("longtext");

                    b.Property<string>("Medicao")
                        .HasColumnType("longtext");

                    b.Property<string>("MeioAmbiente")
                        .HasColumnType("longtext");

                    b.Property<string>("Metodo")
                        .HasColumnType("longtext");

                    b.Property<string>("MetodologiaVerificacao")
                        .HasColumnType("longtext");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PorqueFalhou1")
                        .HasColumnType("longtext");

                    b.Property<string>("PorqueFalhou2")
                        .HasColumnType("longtext");

                    b.Property<string>("PorqueFalhou3")
                        .HasColumnType("longtext");

                    b.Property<string>("PorqueFalhou4")
                        .HasColumnType("longtext");

                    b.Property<string>("PorqueFalhou5")
                        .HasColumnType("longtext");

                    b.Property<string>("PorquePassou1")
                        .HasColumnType("longtext");

                    b.Property<string>("PorquePassou2")
                        .HasColumnType("longtext");

                    b.Property<string>("PorquePassou3")
                        .HasColumnType("longtext");

                    b.Property<string>("PorquePassou4")
                        .HasColumnType("longtext");

                    b.Property<string>("PorquePassou5")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PrazoAlertaQualidade")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PrazoFMEA")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PrazoInstrucao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PrazoPlanoControle")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PrazoPokaYoke")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PrazoTreinamento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Produto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("QualAlertaQualidade")
                        .HasColumnType("longtext");

                    b.Property<string>("QualFMEA")
                        .HasColumnType("longtext");

                    b.Property<string>("QualInstrucao")
                        .HasColumnType("longtext");

                    b.Property<string>("QualPlanoControle")
                        .HasColumnType("longtext");

                    b.Property<string>("QualPokaYoke")
                        .HasColumnType("longtext");

                    b.Property<string>("QualTreinamento")
                        .HasColumnType("longtext");

                    b.Property<bool?>("RealizadoAlertaQualidade")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RealizadoFMEA")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RealizadoInstrucao")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RealizadoPlanoControle")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RealizadoPokaYoke")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RealizadoTreinamento")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UtilizarPokaYoke")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDFSP");

                    b.HasIndex("IDFalha");

                    b.HasIndex("IDSchwarzUserAlertaQualidade");

                    b.HasIndex("IDSchwarzUserFMEA");

                    b.HasIndex("IDSchwarzUserInstrucao");

                    b.HasIndex("IDSchwarzUserNovaFSP");

                    b.HasIndex("IDSchwarzUserPlanoControle");

                    b.HasIndex("IDSchwarzUserPokaYoke");

                    b.HasIndex("IDSchwarzUserTreinamento");

                    b.HasIndex("IDSchwarzUserVerificacao");

                    b.HasIndex("IDNovaFSP");

                    b.ToTable("FSP");
                });

            modelBuilder.Entity("Schwarz.Models.SchwarzUser", b =>
                {
                    b.Property<int>("IDSchwarzUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Matricula")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Setor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Turno")
                        .HasColumnType("longtext");

                    b.HasKey("IDSchwarzUser");

                    b.ToTable("SchwarzUser");
                });

            modelBuilder.Entity("Schwarz.Models.Ideia", b =>
                {
                    b.Property<int>("IDIdeia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Feedback")
                        .HasColumnType("longtext");

                    b.Property<string>("Ganho")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IDUser")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Investimento")
                        .HasColumnType("longtext");

                    b.Property<string>("NomeEquipe")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IDIdeia");

                    b.HasIndex("IDUser");

                    b.ToTable("Ideia");
                });

            modelBuilder.Entity("Schwarz.Models.Maquina", b =>
                {
                    b.Property<int>("IDMaquina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IDMaquina");

                    b.ToTable("Maquina");
                });

            modelBuilder.Entity("Schwarz.Models.Operacao", b =>
                {
                    b.Property<int>("IDOperacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Procedimento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Sequencia")
                        .HasColumnType("int");

                    b.Property<int>("SubSequencia")
                        .HasColumnType("int");

                    b.HasKey("IDOperacao");

                    b.ToTable("Operacao");
                });

            modelBuilder.Entity("Schwarz.Models.PlanoAcao", b =>
                {
                    b.Property<int>("IDPlanoAcao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IDFSP")
                        .HasColumnType("int");

                    b.Property<int>("IDSchwarzUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("Prazo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IDPlanoAcao");

                    b.HasIndex("IDFSP");

                    b.HasIndex("IDSchwarzUser");

                    b.ToTable("PlanoAcao");
                });

            modelBuilder.Entity("Schwarz.Models.Processo", b =>
                {
                    b.Property<int>("IDProcesso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CodigoInterno")
                        .HasColumnType("int");

                    b.Property<int>("IDOperacao")
                        .HasColumnType("int");

                    b.Property<int>("IDProduto")
                        .HasColumnType("int");

                    b.HasKey("IDProcesso");

                    b.HasIndex("IDOperacao");

                    b.HasIndex("IDProduto");

                    b.ToTable("Processo");
                });

            modelBuilder.Entity("Schwarz.Models.ProcessoProduto", b =>
                {
                    b.Property<int>("IDProcessoProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IDProcesso")
                        .HasColumnType("int");

                    b.Property<int>("IDProduto")
                        .HasColumnType("int");

                    b.HasKey("IDProcessoProduto");

                    b.HasIndex("IDProcesso");

                    b.HasIndex("IDProduto");

                    b.ToTable("ProcessoProduto");
                });

            modelBuilder.Entity("Schwarz.Models.Produto", b =>
                {
                    b.Property<int>("IDProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CodigoCliente")
                        .HasColumnType("int");

                    b.Property<int>("IDCliente")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IDProduto");

                    b.HasIndex("IDCliente");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Schwarz.Areas.Identity.Data.SchwarzUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Schwarz.Areas.Identity.Data.SchwarzUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Areas.Identity.Data.SchwarzUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Schwarz.Areas.Identity.Data.SchwarzUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schwarz.Areas.Identity.Data.SchwarzUser", b =>
                {
                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUser")
                        .WithOne("SchwarzUser")
                        .HasForeignKey("Schwarz.Areas.Identity.Data.SchwarzUser", "IDSchwarzUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchwarzUser");
                });

            modelBuilder.Entity("Schwarz.Models.CadastroOleo", b =>
                {
                    b.HasOne("Schwarz.Models.Maquina", "Maquina")
                        .WithMany()
                        .HasForeignKey("IDMaquina")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Areas.Identity.Data.SchwarzUser", "User")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maquina");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Schwarz.Models.Desenho", b =>
                {
                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserAprovador")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserAprovador");

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserDesenhador")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserDesenhador");

                    b.HasOne("Schwarz.Models.Processo", "Processo")
                        .WithMany("Desenhos")
                        .HasForeignKey("IDProcesso");

                    b.HasOne("Schwarz.Models.Produto", "Produto")
                        .WithMany("Desenhos")
                        .HasForeignKey("IDProduto");

                    b.Navigation("SchwarzUserAprovador");

                    b.Navigation("SchwarzUserDesenhador");

                    b.Navigation("Processo");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Schwarz.Models.DesenhoBoleto", b =>
                {
                    b.HasOne("Schwarz.Models.Boleto", "Boleto")
                        .WithMany("DesenhoBoletos")
                        .HasForeignKey("IDBoleto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Models.Desenho", "Desenho")
                        .WithMany("DesenhoBoletos")
                        .HasForeignKey("IDDesenho")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boleto");

                    b.Navigation("Desenho");
                });

            modelBuilder.Entity("Schwarz.Models.EquipeFSP", b =>
                {
                    b.HasOne("Schwarz.Models.FSP", "FSP")
                        .WithMany()
                        .HasForeignKey("IDFSP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUser")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FSP");

                    b.Navigation("SchwarzUser");
                });

            modelBuilder.Entity("Schwarz.Models.EquipeIdeia", b =>
                {
                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUser")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Models.Ideia", "Ideia")
                        .WithMany("EquipeIdeia")
                        .HasForeignKey("IDIdeia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchwarzUser");

                    b.Navigation("Ideia");
                });

            modelBuilder.Entity("Schwarz.Models.Fluxo", b =>
                {
                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserAprovador")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserAprovador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserCriador")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserCriador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("IDProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchwarzUserAprovador");

                    b.Navigation("SchwarzUserCriador");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Schwarz.Models.FluxoOperacao", b =>
                {
                    b.HasOne("Schwarz.Models.Fluxo", "Fluxo")
                        .WithMany("FluxoOperacoes")
                        .HasForeignKey("IDFluxo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Models.Operacao", "Operacao")
                        .WithMany()
                        .HasForeignKey("IDOperacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fluxo");

                    b.Navigation("Operacao");
                });

            modelBuilder.Entity("Schwarz.Models.FSP", b =>
                {
                    b.HasOne("Schwarz.Models.Falha", "Falha")
                        .WithMany()
                        .HasForeignKey("IDFalha")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserAlertaQualidade")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserAlertaQualidade");

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserFMEA")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserFMEA");

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserInstrucao")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserInstrucao");

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserNovaFSP")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserNovaFSP");

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserPlanoControle")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserPlanoControle");

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserPokaYoke")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserPokaYoke");

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserTreinamento")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserTreinamento");

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUserVerificacao")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUserVerificacao");

                    b.HasOne("Schwarz.Models.FSP", "NovaFSP")
                        .WithMany()
                        .HasForeignKey("IDNovaFSP");

                    b.Navigation("Falha");

                    b.Navigation("SchwarzUserAlertaQualidade");

                    b.Navigation("SchwarzUserFMEA");

                    b.Navigation("SchwarzUserInstrucao");

                    b.Navigation("SchwarzUserNovaFSP");

                    b.Navigation("SchwarzUserPlanoControle");

                    b.Navigation("SchwarzUserPokaYoke");

                    b.Navigation("SchwarzUserTreinamento");

                    b.Navigation("SchwarzUserVerificacao");

                    b.Navigation("NovaFSP");
                });

            modelBuilder.Entity("Schwarz.Models.Ideia", b =>
                {
                    b.HasOne("Schwarz.Areas.Identity.Data.SchwarzUser", "User")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Schwarz.Models.PlanoAcao", b =>
                {
                    b.HasOne("Schwarz.Models.FSP", "FSP")
                        .WithMany()
                        .HasForeignKey("IDFSP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Models.SchwarzUser", "SchwarzUser")
                        .WithMany()
                        .HasForeignKey("IDSchwarzUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FSP");

                    b.Navigation("SchwarzUser");
                });

            modelBuilder.Entity("Schwarz.Models.Processo", b =>
                {
                    b.HasOne("Schwarz.Models.Operacao", "Operacao")
                        .WithMany("Processos")
                        .HasForeignKey("IDOperacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Models.Produto", "Produto")
                        .WithMany("Processos")
                        .HasForeignKey("IDProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operacao");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Schwarz.Models.ProcessoProduto", b =>
                {
                    b.HasOne("Schwarz.Models.Processo", "Processo")
                        .WithMany()
                        .HasForeignKey("IDProcesso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schwarz.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("IDProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Processo");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Schwarz.Models.Produto", b =>
                {
                    b.HasOne("Schwarz.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IDCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Schwarz.Models.Boleto", b =>
                {
                    b.Navigation("DesenhoBoletos");
                });

            modelBuilder.Entity("Schwarz.Models.Desenho", b =>
                {
                    b.Navigation("DesenhoBoletos");
                });

            modelBuilder.Entity("Schwarz.Models.Fluxo", b =>
                {
                    b.Navigation("FluxoOperacoes");
                });

            modelBuilder.Entity("Schwarz.Models.SchwarzUser", b =>
                {
                    b.Navigation("SchwarzUser")
                        .IsRequired();
                });

            modelBuilder.Entity("Schwarz.Models.Ideia", b =>
                {
                    b.Navigation("EquipeIdeia");
                });

            modelBuilder.Entity("Schwarz.Models.Operacao", b =>
                {
                    b.Navigation("Processos");
                });

            modelBuilder.Entity("Schwarz.Models.Processo", b =>
                {
                    b.Navigation("Desenhos");
                });

            modelBuilder.Entity("Schwarz.Models.Produto", b =>
                {
                    b.Navigation("Desenhos");

                    b.Navigation("Processos");
                });
#pragma warning restore 612, 618
        }
    }
}
